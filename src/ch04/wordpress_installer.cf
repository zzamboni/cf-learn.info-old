#!/var/cfengine/bin/cf-agent -KIf

#Install WordPress:
#	1. Install Infrastructure:
#		1.1. Install httpd and mod_php and PHP MySQL client.
#		1.2. Install MySQL server.
#			1.2.1. Create WordPress User in MySQL.
#			1.2.2. Create WordPress Database in MySQL.
#		1.3. Make sure httpd and MySQL servers are running.
#	2. Install the PHP application (WordPress)
#		2.1. Download tarball with the latest version of WordPress PHP application.
#		2.2. Extract it into the httpd document root where it can be run by the Web server.
#		2.3. Create WordPress config file wp-config.php from wp-config-sample.php that's shipped with WordPress.
#		2.4. Tweak wp-config.php to put in the data needed to establish database connection (db name, db username and password).
#	
#
# Sample usage:
#
# body common control
# {
#   bundlesequence => { wordpress_install("g.wp_config") };
#   inputs => { "cfengine_stdlib.cf", "wordpress_installer.cf" };
# }

# bundle common g
# {
# vars:
#   "wp_config[DB_NAME]"      string => "wordpress";
#   "wp_config[DB_USER]"      string => "wordpress";
#   "wp_config[DB_PASSWORD]"  string => "lopsa10linux";
#   "wp_config[htmlroot]"     string => "/var/www";
#   "wp_config[tarfile]"      string => "/root/wordpress-latest.tar.gz";
#   "wp_config[wp_dir]"       string => "$(wp_config[htmlroot])/wordpress";
#   "wp_config[wp_config]"    string => "$(wp_config[wp_dir])/wp-config.php";
#   "wp_config[wp_cfgsample]" string => "$(wp_config[wp_dir])/wp-config-sample.php";
# }

bundle agent wordpress_install(params)
{
vars:
  "$(params)[tarfile]"      string => "/root/wordpress-latest.tar.gz";
  "$(params)[downloadurl]"  string => "http://wordpress.org/latest.tar.gz";
  "$(params)[wp_config]"    string => "$($(params)[wp_dir])/wp-config.php";
  "$(params)[wp_cfgsample]" string => "$($(params)[wp_dir])/wp-config-sample.php";
  debian::
    "$(params)[sys_servicecmd]" string => "/usr/sbin/service";
    "$(params)[sys_apachesrv]"  string => "apache2";
  redhat::
    "$(params)[sys_servicecmd]" string => "/sbin/service";
    "$(params)[sys_apachesrv]"  string => "httpd";

methods:
  "wp_pkgs"  usebundle => wp_packages_installed("$(params)");
  "wp_svcs"  usebundle => wp_services_up("$(params)");
  "wp_tar"   usebundle => wp_tarball_is_present("$(params)");
  "wp_xpnd"  usebundle => wp_tarball_is_unrolled("$(params)"); 
  "wp_mysql" usebundle => wp_mysql_configuration("$(params)"); 
  "wp_cfgcp" usebundle => wp_config_exists("$(params)");
  "wp_cfg"   usebundle => wp_is_properly_configured("$(params)");
}

#############################################

bundle agent wp_report_params(params)
{
vars:
  "keys" slist => getindices("$(params)");
reports:
  cfengine_3::
  "$(keys) = $($(params)[$(keys)])";
}

bundle agent wp_packages_installed(params)
{
vars:
  debian::  
  "desired_package" slist => { 
                               "apache2", 
                               "php5",
                               "php5-mysql",
                               "mysql-server",
                             };
  redhat::
  "desired_package" slist => { 
                               "httpd",
                               "php",
                               "php-mysql",
                               "mysql-server",
                             };
packages:  
  "$(desired_package)"
    package_policy => "add",
    package_method => generic,
    classes => if_repaired("packages_added");

commands:
  packages_added::  
    "$($(params)[sys_servicecmd]) $($(params)[sys_apachesrv]) graceful" 
    comment => "Restarting httpd so it can pick up new modules.";

}

#############################################

bundle agent wp_services_up(params)
{
processes:
  debian:: 
    "/usr/sbin/mysqld" restart_class => "start_mysqld";
    "/usr/sbin/apache2"  restart_class => "start_httpd";
  redhat::
    "^mysqld" restart_class => "start_mysqld";
    "^httpd"  restart_class => "start_httpd";

commands: 
  start_mysqld::
    "$($(params)[sys_servicecmd]) mysql start";

  start_httpd::
    "$($(params)[sys_servicecmd]) $($(params)[sys_apachesrv]) start" ;
}

#############################################

bundle agent wp_tarball_is_present(params)
{

classes: 
  "wordpress_tarball_is_present" expression => fileexists("$($(params)[tarfile])");

commands: 
  !wordpress_tarball_is_present::
    "/usr/bin/wget -q -O $($(params)[tarfile]) $($(params)[downloadurl])"
    comment => "Downloading latest version of WordPress.";

reports: 
  wordpress_tarball_is_present::
    "WordPress tarball is on disk.";
}

#############################################

bundle agent wp_tarball_is_unrolled(params)
{

classes: 
  "wordpress_directory_is_present" expression => fileexists("$($(params)[wp_dir])");

reports:
  wordpress_directory_is_present::
    "WordPress directory is present.";

commands:
  !wordpress_directory_is_present:: 
    "/bin/tar -C $($(params)[htmlroot]) -xzf $($(params)[tarfile]) &&
     /bin/mv $($(params)[htmlroot])/wordpress $($(params)[wp_dir])"
    comment => "Unrolling wordpress tarball to $($(params)[wp_dir]).";
}

#############################################

bundle agent wp_mysql_configuration(params)
{

commands:
  "/usr/bin/mysql -u root -e \"
    CREATE DATABASE IF NOT EXISTS $($(params)[DB_NAME]);
    GRANT ALL PRIVILEGES ON $($(params)[DB_NAME]).*
    TO '$($(params)[DB_USER])'@localhost
    IDENTIFIED BY '$($(params)[DB_PASSWORD])';
    FLUSH PRIVILEGES;\"
  ";

}

#############################################

bundle agent wp_config_exists(params)
{

classes:
  "wordpress_config_file_exists"  
    expression => fileexists("$($(params)[wp_config])");

files:
  !wordpress_config_file_exists::  
  "$($(params)[wp_config])"
    copy_from => backup_local_cp("$($(params)[wp_cfgsample])");

reports:
  wordpress_config_file_exists::
    "WordPress config file $($(params)[wp_config]) is present";
  !wordpress_config_file_exists::
    "WordPress config file $($(params)[wp_config]) is not present";
}

#############################################

bundle agent wp_is_properly_configured(params)
{
vars:
  "wpparams" slist => getindices("$(params)"); 

files:
  "$($(params)[wp_config])" 
    edit_line => replace_or_add("define\('$(wpparams)', *'.*",
				"define('$(wpparams)', '$($(params)[$(wpparams)])');");
}
            
#############################################

bundle agent wp_allow_http_inbound(params)
{
files:
  redhat:: # tested on RHEL only, file location may vary based on Linux distro or OS
    "/etc/sysconfig/iptables"
      edit_line => insert_HTTP_allow_rule_before_the_accept_established_tcp_conns_rule,
      comment => "insert HTTP allow rule into /etc/sysconfig/iptables",
      classes => if_repaired("iptables_edited");

commands: 
  iptables_edited::
    "/sbin/service iptables restart"
    comment => "Restarting iptables to load new config";
}

bundle edit_line insert_HTTP_allow_rule_before_the_accept_established_tcp_conns_rule(params)
{
vars:
  "http_rule" string => "-A INPUT -p tcp -m tcp --dport 80 -j ACCEPT";

insert_lines:
  "$(http_rule)"
    location => before_the_accept_established_tcp_conns_rule;
}

body location before_the_accept_established_tcp_conns_rule
{
  before_after => "before";
  first_last => "first";
  select_line_matching => "^-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT.*";
}

# Todo:
#
#
# MySQL:
# - submit a patch to the MySQL folks to add a non-interactive version of /usr/bin/mysql_secure_installation
# - secure mysql instance with a non-interactive version of /usr/bin/mysql_secure_installation once it is available
# - change the root password using /usr/bin/mysqladmin -u root password 'new-password'
# - secure mysql instance by: removing the test databases and anonymous user created by default
#
# httpd:
# - instead of hardcoding "/var/www/html", derive httpd document root on the fly from /etc/httpd/conf/httpd.conf
#   DocumentRoot using Function readstringlist
