#!/var/cfengine/bin/cf-agent -KIf
#
# Author: Aleksey Tsalolikhin <atsaloli.tech@gmail.com>, Diego Zamboni <diego.zamboni@cfengine.com>
# OS: linux
# Tested: ubuntu
#
# Install and configure WordPress:
#	1. Install Infrastructure:
#		1.1. Install httpd and mod_php and PHP MySQL client.
#		1.2. Install MySQL server.
#			1.2.1. Create WordPress User in MySQL.
#			1.2.2. Create WordPress Database in MySQL.
#		1.3. Make sure httpd and MySQL servers are running.
#	2. Install the PHP application (WordPress)
#		2.1. Download tarball with the latest version of WordPress PHP application.
#		2.2. Extract it into the httpd document root where it can be run by the Web server.
#		2.3. Create WordPress config file wp-config.php from wp-config-sample.php that's shipped with WordPress.
#		2.4. Tweak wp-config.php to put in the data needed to establish database connection (db name, db username and password).
#
#
# Sample usage:
#
#   body common control
#   {
#     bundlesequence => { wp_install("g.wp_config") };
#     inputs => { "cfengine_stdlib.cf", "wordpress_installer.cf" };
#   }
#   
#   bundle common g
#   {
#   vars:
#     "wp_config[DB_NAME]"      string => "wordpress";
#     "wp_config[DB_USER]"      string => "wordpress";
#     "wp_config[DB_PASSWORD]"  string => "lopsa10linux";
#     debian::
#       "wp_config[_htmlroot]"     string => "/var/www";
#     redhat::
#       "wp_config[_htmlroot]"     string => "/var/www/html";
#     any::
#       "wp_config[_wp_dir]"       string => "$(wp_config[_htmlroot])/blog";
#   }
#
# Any parameters in wp_config that do not start with an underscore (_) will be
# edited/added to the wp-config.php file. You can use this to modify any
# other Wordpress parameters you want, for example:
#   "wp_config[AUTH_KEY]" string => "foobarbaz";

######################################################################
# Public entry points
######################################################################

# Make sure wordpress is installed and configured correctly.
# Mandatory parameters in the "params" array:
#   DB_NAME
#   DB_USER
#   DB_PASSWORD
#   _htmlroot
#   _wp_dir (final wordpress install directory)
bundle agent wp_install(params)
{
  methods:
      "wp_vars"  usebundle => wp_vars("$(params)");
      "wp_pkgs"  usebundle => wp_packages_installed("wp_vars.conf");
      "wp_svcs"  usebundle => wp_services_up("wp_vars.conf");
      "wp_tar"   usebundle => wp_tarball_is_present("wp_vars.conf");
      "wp_xpnd"  usebundle => wp_tarball_is_unrolled("wp_vars.conf"); 
      "wp_mysql" usebundle => wp_mysql_configuration("wp_vars.conf"); 
      "wp_cfgcp" usebundle => wp_config_exists("wp_vars.conf");
      "wp_cfg"   usebundle => wp_is_properly_configured("wp_vars.conf");
}

# Make sure wordpress is configured correctly. It must be installed already.
# Mandatory parameters in the "params" array:
#   _wp_dir (directory where wordpress is installed)
bundle agent wp_config(params)
{
  methods:
      "wp_vars"  usebundle => wp_vars("$(params)");
      "wp_cfgcp" usebundle => wp_config_exists("wp_vars.conf");
      "wp_cfg"   usebundle => wp_is_properly_configured("wp_vars.conf");
}

#############################################

bundle agent wp_vars(params)   
{
  vars:
      "wp_dir"             string => "$($(params)[_wp_dir])";
      # Default configuration values. Internal parameters start with _
      "conf[_tarfile]"      string => "/root/wordpress-latest.tar.gz",   
                            policy => "overridable";   
      "conf[_downloadurl]"  string => "http://wordpress.org/latest.tar.gz",
                            policy => "overridable";
      "conf[_wp_config]"    string => "$(wp_dir)/wp-config.php",
                            policy => "overridable";
      "conf[_wp_cfgsample]" string => "$(wp_dir)/wp-config-sample.php",
                            policy => "overridable";
    debian::   
      "conf[_sys_servicecmd]" string => "/usr/sbin/service",
                              policy => "overridable";
      "conf[_sys_apachesrv]"  string => "apache2",
                              policy => "overridable";
    redhat::
      "conf[_sys_servicecmd]" string => "/sbin/service",
                              policy => "overridable";
      "conf[_sys_apachesrv]"  string => "httpd",
                              policy => "overridable";
    any::   
      # Copy configuration parameters passed, into a local array
      "param_keys"          slist  => getindices("$(params)");   
      "conf[$(param_keys)]" string => "$($(params)[$(param_keys)])",
                            policy => "overridable";
}

bundle agent wp_report_params(params)
{
  vars:
      "keys" slist => getindices("$(params)");
  reports:
    cfengine_3::
      "$(keys) = $($(params)[$(keys)])";
}

bundle agent wp_packages_installed(params)
{
  vars:
    debian::  
      "desired_package" slist => { 
                                   "apache2", 
                                   "php5",
                                   "php5-mysql",
                                   "mysql-server",
                                 };
    redhat::
      "desired_package" slist => { 
                                   "httpd",
                                   "php",
                                   "php-mysql",
                                   "mysql-server",
                                 };
  packages:  
      "$(desired_package)"
        package_policy => "add",
        package_method => generic,
        classes => if_repaired("packages_added");

  commands:
    packages_added::  
      "$($(params)[_sys_servicecmd]) $($(params)[_sys_apachesrv]) graceful" 
        comment => "Restarting httpd so it can pick up new modules.";

}

#############################################

bundle agent wp_services_up(params)
{
  processes:
    debian:: 
      "/usr/sbin/mysqld" restart_class => "start_mysqld";
      "/usr/sbin/apache2"  restart_class => "start_httpd";
    redhat::
      "^mysqld" restart_class => "start_mysqld";
      "^httpd"  restart_class => "start_httpd";

  commands: 
    start_mysqld::
      "$($(params)[_sys_servicecmd]) mysql start";

    start_httpd::
      "$($(params)[_sys_servicecmd]) $($(params)[_sys_apachesrv]) start" ;
}

#############################################

bundle agent wp_tarball_is_present(params)
{
  classes: 
      "wordpress_tarball_is_present" expression => fileexists("$($(params)[_tarfile])");

  commands: 
    !wordpress_tarball_is_present::
      "/usr/bin/wget -q -O $($(params)[_tarfile]) $($(params)[_downloadurl])"
        comment => "Downloading latest version of WordPress.";

  reports: 
    wordpress_tarball_is_present::
      "WordPress tarball is on disk.";
}

#############################################

bundle agent wp_tarball_is_unrolled(params)
{
  classes: 
      "wordpress_src_dir_is_present" expression => fileexists("$($(params)[_htmlroot])/wordpress");
      "wordpress_final_dir_is_present" expression => fileexists("$($(params)[_wp_dir])");

  reports:
    wordpress_final_dir_is_present::
      "WordPress directory is present.";

  commands:
    !wordpress_final_dir_is_present&!wordpress_src_dir_is_present:: 
      "/bin/tar -xzf $($(params)[_tarfile])"
        comment => "Unrolling wordpress tarball to $($(params)[_htmlroot])/wordpress.",
        contain => in_dir_shell("$($(params)[_htmlroot])");
    wordpress_src_dir_is_present&!wordpress_final_dir_is_present::
      "/bin/mv $($(params)[_htmlroot])/wordpress $($(params)[_wp_dir])"
        comment => "Rename unrolled directory into its final destination $($(params)[_wp_dir])";
}

#############################################

bundle agent wp_mysql_configuration(params)
{
  commands:
      "/usr/bin/mysql -u root -e \"
      CREATE DATABASE IF NOT EXISTS $($(params)[DB_NAME]);
      GRANT ALL PRIVILEGES ON $($(params)[DB_NAME]).*
      TO '$($(params)[DB_USER])'@localhost
      IDENTIFIED BY '$($(params)[DB_PASSWORD])';
      FLUSH PRIVILEGES;\"
";
}

#############################################

bundle agent wp_config_exists(params)
{
  classes:
     "wordpress_config_file_exists"  
        expression => fileexists("$($(params)[_wp_config])");

  files:
    !wordpress_config_file_exists::  
      "$($(params)[_wp_config])"
        copy_from => backup_local_cp("$($(params)[_wp_cfgsample])");

  reports:
    wordpress_config_file_exists::
      "WordPress config file $($(params)[_wp_config]) is present";
    !wordpress_config_file_exists::
      "WordPress config file $($(params)[_wp_config]) is not present";
}

#############################################

bundle agent wp_is_properly_configured(params)
{
  vars:
      "allparams" slist => getindices("$(params)"); 
    secondpass::
      "wpparams"  slist => grep("[^_].*", "allparams");

  classes:
      "secondpass" expression => isvariable("allparams");

  files:
    "$($(params)[_wp_config])" 
      edit_line => replace_or_add("define\('$(wpparams)', *(?!'$($(params)[$(wpparams)]))'.*",
				  "define('$(wpparams)', '$($(params)[$(wpparams)])');");
}

#############################################

# This is not included in the standard method sequence called from wp_install because
# it has not been fully tested and is not something everyone would want to do. If
# you want it, add it specifically to your bundlesequence.

bundle agent wp_allow_http_inbound(params)
{
  files:
    redhat:: # tested on RHEL only, file location may vary based on Linux distro or OS
      "/etc/sysconfig/iptables"
        edit_line => wp_insert_HTTP_allow_rule_before_the_accept_established_tcp_conns_rule,
        comment => "insert HTTP allow rule into /etc/sysconfig/iptables",
        classes => if_repaired("iptables_edited");

  commands: 
    iptables_edited::
      "/sbin/service iptables restart"
        comment => "Restarting iptables to load new config";
}

bundle edit_line wp_insert_HTTP_allow_rule_before_the_accept_established_tcp_conns_rule(params)
{
  vars:
      "http_rule" string => "-A INPUT -p tcp -m tcp --dport 80 -j ACCEPT";

  insert_lines:
      "$(http_rule)"
        location => wp_before_the_accept_established_tcp_conns_rule;
}

body location wp_before_the_accept_established_tcp_conns_rule
{
      before_after => "before";
      first_last => "first";
      select_line_matching => "^-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT.*";
}

# Todo:
#
#
# MySQL:
# - submit a patch to the MySQL folks to add a non-interactive version of /usr/bin/mysql_secure_installation
# - secure mysql instance with a non-interactive version of /usr/bin/mysql_secure_installation once it is available
# - change the root password using /usr/bin/mysqladmin -u root password 'new-password'
# - secure mysql instance by: removing the test databases and anonymous user created by default
#
# httpd:
# - instead of hardcoding "/var/www/html", derive httpd document root on the fly from /etc/httpd/conf/httpd.conf
#   DocumentRoot using Function readstringlist
